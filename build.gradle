group 'br.com.alissonbolsoni'
version '0.0.1'
description = "Sistema Backend para loja de MÃºsica"

buildscript {
    ext.artifactId = 'vinyl-blueStore'
    ext.archive_extension = 'war'
    ext.archive_file_name = "${artifactId}.${archive_extension}"

    ext.kotlin_version = '1.3.50'
    ext.jacoco_palantir_version = '0.4.0'
    ext.cargo_plugin_version = '2.6.1'

    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.palantir:jacoco-coverage:$jacoco_palantir_version"
        classpath "com.bmuschko:gradle-cargo-plugin:$cargo_plugin_version"
    }
}

apply plugin: 'jacoco'
apply plugin: 'com.palantir.jacoco-full-report'
apply plugin: 'com.bmuschko.cargo'

jacoco {
    toolVersion = "0.8.3"
}

dependencies {
    def cargoVersion = '1.4.5'
    cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
            "org.codehaus.cargo:cargo-ant:$cargoVersion"
}

allprojects {
    repositories {
        jcenter()
    }
}

subprojects {
    ext {
        versions = [
                junit         : "5.2.0",
                assertj       : "3.11.1",
                spring        : "2.1.7.RELEASE",
                mysql         : "5.1.46",
                h2            : '1.4.199',
                flyway        : '5.2.4',
                jackson_kotlin: '2.9.7',
                swagger       : '2.9.2',
                mockk         : '1.9',
                inject        : '1',
                spotify       : '2.1.2',
                kotlinx       : '1.3.2',
        ]

        libs = [
                inject       : [
                        "javax.inject:javax.inject:${versions.inject}"
                ],
                spring_test  : [
                        "org.springframework.boot:spring-boot-starter-test:${versions.spring}",
                ],
                unit_test    : [
                        "org.junit.jupiter:junit-jupiter-api:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-params:${versions.junit}",
                        "org.junit.jupiter:junit-jupiter-engine:${versions.junit}",
                        "io.mockk:mockk:${versions.mockk}",
                ],
                spring_config: [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "com.fasterxml.jackson.module:jackson-module-kotlin:${versions.jackson_kotlin}",
                        "org.springframework.boot:spring-boot-configuration-processor:${versions.spring}",
                        "io.springfox:springfox-swagger2:${versions.swagger}",
                ],
                rest         : [
                        "org.springframework.boot:spring-boot-starter-web:${versions.spring}",
                        "io.springfox:springfox-swagger-ui:${versions.swagger}",
                        "se.michaelthelin.spotify:spotify-web-api-java:${versions.spotify}"
                ],
                database     : [
                        "org.springframework.boot:spring-boot-starter-data-jpa:${versions.spring}",
                        "mysql:mysql-connector-java:${versions.mysql}",
                ],
                coroutines   : [
                        "org.jetbrains.kotlinx:kotlinx-coroutines-core:${versions.kotlinx}",
                ],
        ]
    }
}

configure(allprojects - project(":application")) {
    apply plugin: "java"
    apply plugin: "kotlin"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: 'jacoco'

    compileKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        kotlinOptions.javaParameters = true
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = JavaVersion.VERSION_1_8
        kotlinOptions.javaParameters = true
    }

    test {
        useJUnitPlatform()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }
}

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file("$buildDir/jacoco/all-test.exec")
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

//cargo {
//    containerId = 'tomcat7x'
//    port = 8080
//
//    deployable {
//        file = file("${rootProject.buildDir}/${rootProject.ext.archive_file_name}")
//        context = rootProject.ext.artifactId
//    }
//
//    remote {
//        hostname = System.getenv("TOMCAT_DEPLOY_HOST")
//        username = System.getenv("TOMCAT_DEPLOY_USER")
//        password = System.getenv("TOMCAT_DEPLOY_PASSWORD")
//    }
//}

wrapper {
    gradleVersion = '5.5.1'
}